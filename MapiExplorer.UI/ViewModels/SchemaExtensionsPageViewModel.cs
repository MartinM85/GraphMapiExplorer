using MapiExplorer.Models;
using MapiExplorer.Services;
using MapiExplorer.UI.Extensions;
using System.Windows.Input;

namespace MapiExplorer.UI.ViewModels
{
    public class SchemaExtensionsPageViewModel : ViewModelBase
    {
        private readonly ISchemaExtensionsService _schemaExtensionsService;
        private readonly IApplicationService _applicationService;
        private readonly IAppSettings _appSettings;

        public SchemaExtensionsPageViewModel(ISchemaExtensionsService schemaExtensionsService, IApplicationService applicationService,
            IAppSettings appSettings)
        {
            _schemaExtensionsService = schemaExtensionsService;
            _applicationService = applicationService;
            _appSettings = appSettings;

            CreateExtensionSchemaCommand = new Command(CreateExtension);
            FilterCommand = new Command(LoadData);
            ShowDetailsCommand = new Command(GoToDetails);

            SchemaExtensions = new ObservableCollectionEx<SchemaExtensionDto>();
        }

        public string Filter { get; set; }

        public ObservableCollectionEx<SchemaExtensionDto> SchemaExtensions { get; set; }

        public ICommand CreateExtensionSchemaCommand { get; set; }
        public ICommand FilterCommand { get; set; }
        public ICommand ShowDetailsCommand { get; set; }

        private bool _loadingData;
        public bool LoadingData
        {
            get => _loadingData;
            set
            {
                _loadingData = value; 
                OnPropertyChanged();
            }
        }

        protected override async Task LoadDataAsync()
        {
            LoadingData = true;
            var data = await _schemaExtensionsService.GetExtensionsAsync(Filter);
            MainThread.BeginInvokeOnMainThread(() =>
            {
                SchemaExtensions.ClearAndAddRange(data.Select(x =>
                new SchemaExtensionDto
                {
                    Id = x.Id,
                    Description = x.Description
                }));
            });
            LoadingData = false;
        }

        private Task _createExtensionTask;

        private void CreateExtension()
        {
            if (_createExtensionTask != null && _createExtensionTask.IsCompleted)
            {
                _createExtensionTask.Dispose();
                _createExtensionTask = null;
            }
            _createExtensionTask = CreateExtensionAsync();
        }

        private async Task CreateExtensionAsync()
        {
            var appId = _appSettings.ApplicationId;
            // name of schema extension is generated by Graph API, so we store the name in extension property
            var extProp = await _applicationService.GetExtensionAsync(appId, GitHubExtensionProperty.Id);
            if (extProp == null)
            {
                // extension property doesn't exist
                var targetObjects = new List<string> { "Application" };
                extProp = await _applicationService.CreateExtensionAsync(appId, GitHubExtensionProperty.Id, targetObjects, GraphPropertyTypes.String);
            }
            if (extProp != null)
            {
                var extPropValue = await _applicationService.GetExtensionPropertyValueAsync<string>(appId, GitHubExtensionProperty.Id);
                if (string.IsNullOrEmpty(extPropValue))
                {
                    // schema extension doesn't exist, so create a new one
                    var schemaExtension = new SchemaExtensionDto
                    {
                        Id = GitHubExtensionProperty.Id,
                        Description = "Information about GitHub accounts associated with user",
                        Properties = new List<SchemaExtensionPropertyDto>
                            {
                                new SchemaExtensionPropertyDto
                                {
                                    Name = GitHubExtensionProperty.WorkAccount,
                                    Type = $"{GraphPropertyTypes.String}"
                                },
                                new SchemaExtensionPropertyDto
                                {
                                    Name = GitHubExtensionProperty.PersonalAccount,
                                    Type = $"{GraphPropertyTypes.String}"
                                }
                            },
                        TargetTypes = new List<string> { "User" }
                    };
                    var schema = await _schemaExtensionsService.CreateSchemaExtensionAsync(appId, schemaExtension);
                    if (schema != null)
                    {
                        await _schemaExtensionsService.MakeSchemaExtensionAvailableAsync(schema.Id);
                        await _applicationService.AddExtensionPropertyValue(appId, GitHubExtensionProperty.Id, schema.Id);
                        await LoadDataAsync();
                    }
                }
            }            
        }

        private async void GoToDetails(object value)
        {
            if (value is string entityId && !string.IsNullOrEmpty(entityId))
            {
                var parameters = new Dictionary<string, object>();
                parameters[QueryAttributes.EntityId] = entityId;
                await Shell.Current.GoToAsync(Routes.SchemaExtensionDetail, parameters);
            }
        }
    }
}
